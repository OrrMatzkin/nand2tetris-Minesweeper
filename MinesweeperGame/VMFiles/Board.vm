function Board.new 1
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 4
call String.new 1
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
pop local 0
push pointer 0
call Board.initCells 1
pop temp 0
push constant 10
pop this 1
push pointer 0
return
function Board.initCells 3
push argument 0
pop pointer 0
push constant 9
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 9
lt
not
if-goto WHILE_END0
push constant 9
call Array.new 1
pop local 2
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 9
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
push local 0
push local 1
push constant 0
call Cell.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push this 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.getCell 1
push argument 0
pop pointer 0
push argument 2
push this 0
add
pop pointer 1
push that 0
pop local 0
push argument 1
push local 0
add
pop pointer 1
push that 0
return
function Board.selectCell 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Board.getCell 3
pop local 0
push local 0
push argument 3
call Cell.setSelected 2
pop temp 0
push local 0
call Cell.draw 1
pop temp 0
push constant 0
return
function Board.openCell 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Board.validCell 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
push argument 2
call Board.getCell 3
pop local 0
push local 0
call Cell.isOpen 1
not
push local 0
call Cell.isFlaged 1
not
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
call Cell.changeOpenedStatus 1
pop temp 0
push local 0
call Cell.draw 1
pop temp 0
push local 0
call Cell.getValue 1
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push argument 1
push argument 2
call Board.openAllNeighbors 3
pop temp 0
label IF_FALSE2
label IF_FALSE1
label IF_FALSE0
push constant 0
return
function Board.openAllNeighbors 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push constant 1
sub
push argument 2
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push constant 1
sub
push argument 2
push constant 1
add
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push argument 2
push constant 1
sub
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push argument 2
push constant 1
add
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push constant 1
add
push argument 2
push constant 1
sub
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push constant 1
add
push argument 2
call Board.openNeighbor 3
pop temp 0
push pointer 0
push argument 1
push constant 1
add
push argument 2
push constant 1
add
call Board.openNeighbor 3
pop temp 0
push constant 0
return
function Board.openNeighbor 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Board.validCell 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
push argument 2
call Board.openCell 3
pop temp 0
label IF_FALSE0
push constant 0
return
function Board.flagUnflagCell 2
push argument 0
pop pointer 0
push this 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
push argument 2
call Board.getCell 3
pop local 0
push local 0
call Cell.changeFlagedStatus 1
pop local 1
push local 0
call Cell.draw 1
pop temp 0
push local 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 1
push constant 1
sub
pop this 1
goto IF_END1
label IF_FALSE1
push this 1
push constant 1
add
pop this 1
label IF_END1
label IF_FALSE0
push constant 0
return
function Board.getFlagsLeft 0
push argument 0
pop pointer 0
push this 1
return
function Board.foundAllMines 5
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push constant 9
lt
not
if-goto WHILE_END0
push local 1
push this 0
add
pop pointer 1
push that 0
pop local 3
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push constant 9
lt
not
if-goto WHILE_END1
push local 2
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 4
call Cell.isFlaged 1
push local 4
call Cell.getValue 1
push constant 10
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 10
eq
return
function Board.draw 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 9
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 9
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.draw 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.validCell 0
push argument 0
pop pointer 0
push argument 1
push constant 9
lt
push argument 1
push constant 1
neg
gt
and
push argument 2
push constant 9
lt
and
push argument 2
push constant 1
neg
gt
and
return
function Board.dispose 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 9
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 9
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.dispose 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 2
call Array.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 0
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
