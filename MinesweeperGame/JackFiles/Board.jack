/** A minesweeper game Board class */
class Board {

    field Array cells; // 2D array holding all board cells
    field int flagsLeft; // the amout of flags left to put
    
    /** Constructs a Board */
    constructor Board new() {
        do initCells(); 
        let flagsLeft = 10;
        return this;
    }

    /** Creates and initialises all board cell */
    method void initCells () {
        var int i, j;
        var Array curCol;
        let cells = Array.new(9);
        let i = 0;
        while (i < 9) {
            let curCol = Array.new(9);
            let j = 0;
            while(j < 9) {
                let curCol[j] = Cell.new(i,j,0);
                let j = j + 1;
            }
            let cells[i] = curCol;
            let i = i + 1;
        }
        return;
    }

    /** 
    Gets a specifc cell.

    parameters:
        i (int) - the cell row.
        j (int) -  the cell column.
    */
    method Cell getCell(int i, int j) {
        var Array curCol;
        let curCol = cells[j];
        return curCol[i];
    }

    /** 
        Selects or unselects a specifc cell.

        parameters:
            i (int) - the cell row.
            j (int) -  the cell column.
            selected (boolean) - true if we want to select, else false.
    */
    method void selectCell (int i, int j, boolean selected) {
        var Cell cell;
        let cell = getCell(i,j);
        do cell.setSelected(selected);
        do cell.draw();
        return;
    } 

    /**
        Opens a specifc cell.

        parameters:
            i (int) - the cell row.
            j (int) -  the cell column.
    */
    method void openCell(int i, int j) {
        var Cell cell;
        if (validCell(i, j)) {
            let cell = getCell(i,j);
            if ((~cell.isOpen()) & (~cell.isFlaged())) {
                do cell.changeOpenedStatus();
                do cell.draw();
                if (cell.getValue() = 0) {
                    do openAllNeighbors(i,j);
                }    
            }
        }
        return;
    }

    /**
        Opens all cell Neighbor cells.

        parameters:
            i (int) - the middle cell row.
            j (int) -  the middle cell column.
    */
    method void openAllNeighbors(int i, int j) {
        do openNeighbor(i-1,j-1);
        do openNeighbor(i-1,j);
        do openNeighbor(i-1,j+1);
        do openNeighbor(i,j-1);
        do openNeighbor(i,j+1);
        do openNeighbor(i+1,j-1);
        do openNeighbor(i+1,j);
        do openNeighbor(i+1,j+1);
        return;
    }

    /**
        Opens the specic cell as a neighbor.

        parameters:
            i (int) - the middle cell row.
            j (int) -  the middle cell column.
    */
    method void openNeighbor(int i, int j) {
        if (validCell(i,j)) {
            do openCell(i, j);
        }
        return;
    }   
     
    /** 
        Flags or unflags a specifc cell.

        parameters:
            i (int) - the cell row.
            j (int) -  the cell column.
    */
    method void flagUnflagCell(int i, int j) {
        var Cell cell;
        var bollean flaged;
        if (flagsLeft > 0) {
            let cell = getCell(i,j);
            let flaged = cell.changeFlagedStatus();
            do cell.draw();
            if (flaged) {let flagsLeft = flagsLeft - 1;}
            else {let flagsLeft = flagsLeft + 1;}
        }
        return;
    }

    /** Gets the amout of flags left to put */
    method int getFlagsLeft () {
        return flagsLeft;
    }

    /** Check if the player found all the hidden mines */
    method boolean foundAllMines () {
        var int minesFound;
        var int i, j;
        var Array curCol;
        var Cell curCell;
        let minesFound = 0;
        let i = 0;
        while (i < 9) {
            let curCol = cells[i];
            let j = 0;
            while (j < 9) {
                let curCell = curCol[j];
                if (curCell.isFlaged() & (curCell.getValue() = 10)) {
                    let minesFound = minesFound + 1;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return (minesFound = 10);
    }

    /** Draw all board cells */
    method void draw () {
        var int i, j;
        var Array curCol;
        var Cell curCell;
        let i = 0;
        while (i < 9) {
            let curCol = cells[i];
            let j = 0;
            while (j < 9) {
                let curCell = curCol[j];
                do curCell.draw();
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    /** 
        checks if the given cell index are valid.

        parameters:
            i (int) - the cell row.
            j (int) -  the cell column.
    */
    method boolean validCell(int i, int j) {
        return ((i < 9) & (i > -1) & (j < 9) & (j > -1));
    }

    /** Disposes the Board (and all of it's cells) */
    method void dispose() {
        var int i, j;
        var Array curCol;
        var Cell curCell;
        let i = 0;
        while (i < 9) {
            let curCol = cells[i];
            let j = 0;
            while (j < 9) {
                let curCell = curCol[j];
                do curCell.dispose();
                let j = j + 1;
            }
            do curCol.dispose();
            let i = i + 1;
        }
        do cells.dispose();
        do Memory.deAlloc(this);
        return;
    }

    


}