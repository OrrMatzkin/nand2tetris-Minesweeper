// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // if (zx == 1) then outx = 0, else outx = x.
    And(a=zx, b=true, out=xsel); 
    Mux16(a=x, b=false, sel=xsel, out=outx);

    // if (zy == 1) then outy = 0, else outy = y.
    And(a=zy, b=true, out=ysel); 
    Mux16(a=y, b=false, sel=ysel, out=outy);

    // if (nx == 1) then outx = !x, else outx = x.
    And(a=nx, b=true, out=xnsel); 
    Not16(in=outx, out=noutx);
    Mux16(a=outx, b=noutx, sel=xnsel, out=outx2);

    // if (zy == 1) then outy = !y, else outy = y.
    And(a=ny, b=true, out=ynsel); 
    Not16(in=outy, out=nouty);
    Mux16(a=outy, b=nouty, sel=ynsel, out=outy2);

    // if (f == 1) then outxy = x + y, else outxy = x & y.
    And(a=f, b=true, out=fsel); 
    Add16(a=outx2, b=outy2, out=outxpy);
    And16(a=outx2, b=outy2, out=outxay);
    Mux16(a=outxay, b=outxpy, sel=fsel, out=outxy);

    // if (no == 1) then out = !outxy.
    And(a=no, b=true, out=nosel); 
    Not16(in=outxy, out=notoutxy);
    Mux16(a=outxy, b=notoutxy, sel=nosel, out[0..7]=finalout1,
         out[8..15]=finalout2, out[15]=finalout3, out=out);
    
    // status
    // if (output == 0) then zr = 1, else zr = 0.
    Or8Way(in=finalout1, out=zr1);
    Or8Way(in=finalout2, out=zr2);
    Not(in=zr1, out=nzr1);
    Not(in=zr2, out=nzr2);
    And(a=nzr1, b=nzr2, out=zr);

    // if (output < 0) then ng = 1, else ng = 0.
    Mux(a=false, b=true, sel=finalout3, out=ng);


    
}