// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // choose between A-instruction and C-instruction
    Mux16(a=instruction, b=ALU-output, sel=instruction[15], out=ARegister-input);

    // A Register, if it's A-instuction or d1 is set then load=1, else load=0
    Not(in=instruction[15], out=is-A-instruction);
    Or(a=is-A-instruction, b=instruction[5], out=load-A);
    ARegister(in=ARegister-input, load=load-A, out=ARegister-output, out[0..14]=addressM);

    // choose between A Register output and M Register to be y input of the ALU
    Mux16(a=ARegister-output, b=inM, sel=instruction[12], out=AM);

    // D Register, if it's C-instuction or d2 is set then load=1, else load=0
    And(a=instruction[4], b=instruction[15], out=load-D);
    DRegister(in=ALU-output, load=load-D, out=DRegister-output);

    // ALU
    ALU(x=DRegister-output, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=ALU-output, out=outM, zr=zr-output, ng=ng-output);   

    // if instruction[3] == 1 then and we have a C-instruction then writeM = 1 else, writeM = 0
    And(a=instruction[3], b=instruction[15], out=writeM);

    // if (ALU-output == 0) then zr = 1, else zr = 0.
    // if (ALU-output < 0) then ng = 1, else ng = 0.
    Not(in=zr-output, out=not-zr);
    Not(in=ng-output, out=not-ng);
    And(a=not-zr, b=not-ng, out=not-zr-ng);
    
    // check jump (j1, j2, j3)
    And(a=instruction[2], b=ng-output, out=jump-neg);
    And(a=instruction[1], b=zr-output, out=jump-zero);
    And(a=instruction[0], b=not-zr-ng, out=jump-pos);

    // checks if there a jump (of any kind)
    Or(a=jump-neg, b=jump-zero, out=jump1);
    Or(a=jump1, b=jump-pos, out=jump2);  

    // if there is a jump and we have a C-instruction
    And(a=jump2, b=instruction[15], out=load-pc);

    // Program Counter
    PC(in=ARegister-output, load=load-pc, inc=true, reset=reset, out[0..14]=pc);
}