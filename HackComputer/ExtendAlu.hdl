// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // all shift options for x and y inputs
     ShiftLeft(in=y, out=left-y);
     ShiftLeft(in=x, out=left-x);
     ShiftRight(in=y, out=right-y);
     ShiftRight(in=x, out=right-x);

     // if [00] -> right-y, [01] -> right_x, [10] ->left_y, [11] -> left_x
     Mux4Way16(a=right-y, b=right-x, c=left-y, d=left-x, sel=instruction[4..5], out=shifted-out);

     // run the regular ALU and save his outputs
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
          ny=instruction[2], f=instruction[1], no=instruction[0],
          out=ALU-out, zr=ALU-zr-out, ng=ALU-ng-out);

     // if instruction[8] == b=instruction[7] == 1 then we output the ALU outputs
     And(a=instruction[8], b=instruction[7], out=ALU-output);
     Mux16(a=shifted-out, b=ALU-out, sel=ALU-output, out=final-out, out[15]=first-bit-out);
     Mux16(a=false, b=final-out, sel=true, out=out);

    // if (final-out == 0) then zr = 1, else zr = 0.
    Or16Way(in=final-out, out=or-out);
    Not(in=or-out, out=shift-zr);


    // if (final-out < 0) then ng = 1, else ng = 0.
    Mux(a=false, b=true, sel=first-bit-out, out=shift-ng);


    // if instruction[8] == b=instruction[7] == 1 then we output the ALU outputs
    Mux(a=shift-zr, b=ALU-zr-out, sel=ALU-output, out=zr);
    Mux(a=shift-ng, b=ALU-ng-out, sel=ALU-output, out=ng);
}