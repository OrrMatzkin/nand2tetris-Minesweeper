/** A Cell class */
class Cell {

    field int x, y; // the cell's location
    field int value; // 0, 1, 2, 3, 4 or 10 (10 = mine)
    field boolean flaged; // true if the cell is flaged
    field boolean selected; // true if the cell is selected
    field boolean opened; // true if the cell is opened
    field int addressScreenShift; // the start memory screen of the cell
    
    /**
        Constructs a Cell.

        parameters: 
            i (int) - the cell row.
            j (int) -  the cell column.
            v (int) - the cell value.
    */    
    constructor Cell new(int i, int j, int v) {
        let x = i;
        let y = j;
        let value = v;
        let flaged = false;
        let selected = false;
        let opened = false;
        let addressScreenShift = 16384 + (32*16*4) - 2;
        do draw();
        return this;
    }

    /** Draws the cell */
    method void draw() {
        if (~opened) {
            if (flaged) {do drawFlaged();}
            else {do drawClosed();} 
        } else {
            if (value = 0) {do drawEmpty0();}
            if (value = 1) {do drawEmpty1();}
            if (value = 2) {do drawEmpty2();}
            if (value = 3) {do drawEmpty3();}   
            if (value = 4) {do drawEmpty4();}  
            if (value = 10) {do drawMine();}            
        }
        return;
    }

    /**
        Set the select boolean value.

        parameters: 
            value (boolean) - the selected value.
    */    
    method void setSelected(boolean value) {
        let selected = value;
        return;
    }

    /** Open the cell */
    method void changeOpenedStatus(){
        if (~opened) {let opened = true;}
        return;
    }

    /** Change the flaged boolean status */
    method boolean changeFlagedStatus(){
        let flaged = ~flaged;
        return flaged;
    }

    /** Gets the cell value */
    method int getValue () {
        return value;
    }

    /**
        Sets the cell value.

        parameters:
            v (int) - the value to set.
    */        
    method void setValue (int v) {
        let value = v;
        return;
    }

    /** Checks if the cell is open */
    method boolean isOpen () {
        return opened;
    }

    /** Checks if the cell is flaged */
    method boolean isFlaged () {
        return flaged;
    }
    
    /** Draw a closed cell */
    method void drawClosed() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x));
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 16386);
            do Memory.poke(memAddress + 128, 16386);
            do Memory.poke(memAddress + 160, 16386);
            do Memory.poke(memAddress + 192, 16386);
            do Memory.poke(memAddress + 224, 16386);
            do Memory.poke(memAddress + 256, 16386);
            do Memory.poke(memAddress + 288, 16386);
            do Memory.poke(memAddress + 320, 16386);
            do Memory.poke(memAddress + 352, 16386);
            do Memory.poke(memAddress + 384, 16386);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);
        } else {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -1);
            do Memory.poke(memAddress + 64, -16381);
            do Memory.poke(memAddress + 96, -16381);
            do Memory.poke(memAddress + 128, -16381);
            do Memory.poke(memAddress + 160, -16381);
            do Memory.poke(memAddress + 192, -16381);
            do Memory.poke(memAddress + 224, -16381);
            do Memory.poke(memAddress + 256, -16381);
            do Memory.poke(memAddress + 288, -16381);
            do Memory.poke(memAddress + 320, -16381);
            do Memory.poke(memAddress + 352, -16381);
            do Memory.poke(memAddress + 384, -16381);
            do Memory.poke(memAddress + 416, -16381);
            do Memory.poke(memAddress + 448, -1);
            do Memory.poke(memAddress + 480, -1);  
        }
        return;
    }

    /** Draw a flaged cell */
    method void drawFlaged() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x)) ;
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 16434);
            do Memory.poke(memAddress + 128, 16626);
            do Memory.poke(memAddress + 160, 18418);
            do Memory.poke(memAddress + 192, 17394);
            do Memory.poke(memAddress + 224, 16626);
            do Memory.poke(memAddress + 256, 16434);
            do Memory.poke(memAddress + 288, 16402);
            do Memory.poke(memAddress + 320, 16402);
            do Memory.poke(memAddress + 352, 16402);
            do Memory.poke(memAddress + 384, 16402);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);
        } else {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -32767);
            do Memory.poke(memAddress + 64, -32767);
            do Memory.poke(memAddress + 96, -32719);
            do Memory.poke(memAddress + 128, -32527);
            do Memory.poke(memAddress + 160, -30735);
            do Memory.poke(memAddress + 192, -31759);
            do Memory.poke(memAddress + 224, -32527);
            do Memory.poke(memAddress + 256, -32719);
            do Memory.poke(memAddress + 288, -32751);
            do Memory.poke(memAddress + 320, -32751);
            do Memory.poke(memAddress + 352, -32751);
            do Memory.poke(memAddress + 384, -32751);
            do Memory.poke(memAddress + 416, -32767);
            do Memory.poke(memAddress + 448, -32767);
            do Memory.poke(memAddress + 480, -1);    
        }
        return;
    } 

    /** Draw a 0 value cell */
    method void drawEmpty0() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x));
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 16386);
            do Memory.poke(memAddress + 128, 16386);
            do Memory.poke(memAddress + 160, 16386);
            do Memory.poke(memAddress + 192, 16386);
            do Memory.poke(memAddress + 224, 16386);
            do Memory.poke(memAddress + 256, 16386);
            do Memory.poke(memAddress + 288, 16386);
            do Memory.poke(memAddress + 320, 16386);
            do Memory.poke(memAddress + 352, 16386);
            do Memory.poke(memAddress + 384, 16386);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);
        } else {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -32767);
            do Memory.poke(memAddress + 64, -32767);
            do Memory.poke(memAddress + 96, -32767);
            do Memory.poke(memAddress + 128, -32767);
            do Memory.poke(memAddress + 160, -32767);
            do Memory.poke(memAddress + 192, -32767);
            do Memory.poke(memAddress + 224, -32767);
            do Memory.poke(memAddress + 256, -32767);
            do Memory.poke(memAddress + 288, -32767);
            do Memory.poke(memAddress + 320, -32767);
            do Memory.poke(memAddress + 352, -32767);
            do Memory.poke(memAddress + 384, -32767);
            do Memory.poke(memAddress + 416, -32767);
            do Memory.poke(memAddress + 448, -32767);
            do Memory.poke(memAddress + 480, -1);
        }
        
        return;
    } 

    /** Draw a 1 value cell */
    method void drawEmpty1() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x));
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 16642);
            do Memory.poke(memAddress + 128, 16770);
            do Memory.poke(memAddress + 160, 16706);
            do Memory.poke(memAddress + 192, 16674);
            do Memory.poke(memAddress + 224, 16642);
            do Memory.poke(memAddress + 256, 16642);
            do Memory.poke(memAddress + 288, 16642);
            do Memory.poke(memAddress + 320, 16642);
            do Memory.poke(memAddress + 352, 16642);
            do Memory.poke(memAddress + 384, 18402);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);    
        } else {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -32767);
            do Memory.poke(memAddress + 64, -32767);
            do Memory.poke(memAddress + 96, -32511);
            do Memory.poke(memAddress + 128, -32383);
            do Memory.poke(memAddress + 160, -32447);
            do Memory.poke(memAddress + 192, -32479);
            do Memory.poke(memAddress + 224, -32511);
            do Memory.poke(memAddress + 256, -32511);
            do Memory.poke(memAddress + 288, -32511);
            do Memory.poke(memAddress + 320, -32511);
            do Memory.poke(memAddress + 352, -32511);
            do Memory.poke(memAddress + 384, -30751);
            do Memory.poke(memAddress + 416, -32767);
            do Memory.poke(memAddress + 448, -32767);
            do Memory.poke(memAddress + 480, -1);
        }
        
        return;
    } 

    /** Draw a 2 value cell */
    method void drawEmpty2() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x)) ;
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 17346);
            do Memory.poke(memAddress + 128, 17442);
            do Memory.poke(memAddress + 160, 17442);
            do Memory.poke(memAddress + 192, 17410);
            do Memory.poke(memAddress + 224, 16898);
            do Memory.poke(memAddress + 256, 16642);
            do Memory.poke(memAddress + 288, 16514);
            do Memory.poke(memAddress + 320, 16450);
            do Memory.poke(memAddress + 352, 16418);
            do Memory.poke(memAddress + 384, 18402);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);
        } else {
            do Memory.poke(memAddress + 0, -1);
        do Memory.poke(memAddress + 32, -32767);
        do Memory.poke(memAddress + 64, -32767);
        do Memory.poke(memAddress + 96, -31807);
        do Memory.poke(memAddress + 128, -31711);
        do Memory.poke(memAddress + 160, -31711);
        do Memory.poke(memAddress + 192, -31743);
        do Memory.poke(memAddress + 224, -32255);
        do Memory.poke(memAddress + 256, -32511);
        do Memory.poke(memAddress + 288, -32639);
        do Memory.poke(memAddress + 320, -32703);
        do Memory.poke(memAddress + 352, -32735);
        do Memory.poke(memAddress + 384, -30751);
        do Memory.poke(memAddress + 416, -32767);
        do Memory.poke(memAddress + 448, -32767);
        do Memory.poke(memAddress + 480, -1);
        }
        return;
    } 

    /** Draw a 3 value cell */
    method void drawEmpty3() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x)) ;
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 17346);
            do Memory.poke(memAddress + 128, 17442);
            do Memory.poke(memAddress + 160, 17442);
            do Memory.poke(memAddress + 192, 17410);
            do Memory.poke(memAddress + 224, 17282);
            do Memory.poke(memAddress + 256, 17410);
            do Memory.poke(memAddress + 288, 17410);
            do Memory.poke(memAddress + 320, 17442);
            do Memory.poke(memAddress + 352, 17442);
            do Memory.poke(memAddress + 384, 17346);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);    
        } else {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -32767);
            do Memory.poke(memAddress + 64, -32767);
            do Memory.poke(memAddress + 96, -31807);
            do Memory.poke(memAddress + 128, -31711);
            do Memory.poke(memAddress + 160, -31711);
            do Memory.poke(memAddress + 192, -31743);
            do Memory.poke(memAddress + 224, -31871);
            do Memory.poke(memAddress + 256, -31743);
            do Memory.poke(memAddress + 288, -31743);
            do Memory.poke(memAddress + 320, -31711);
            do Memory.poke(memAddress + 352, -31711);
            do Memory.poke(memAddress + 384, -31807);
            do Memory.poke(memAddress + 416, -32767);
            do Memory.poke(memAddress + 448, -32767);
            do Memory.poke(memAddress + 480, -1);    
        }
        return;
    } 

    /** Draw a 4 value cell */
    method void drawEmpty4() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x)) ;
        if (selected) {
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 32766);
            do Memory.poke(memAddress + 64, 16386);
            do Memory.poke(memAddress + 96, 16402);
            do Memory.poke(memAddress + 128, 16402);
            do Memory.poke(memAddress + 160, 17426);
            do Memory.poke(memAddress + 192, 17426);
            do Memory.poke(memAddress + 224, 17426);
            do Memory.poke(memAddress + 256, 20466);
            do Memory.poke(memAddress + 288, 17410);
            do Memory.poke(memAddress + 320, 17410);
            do Memory.poke(memAddress + 352, 17410);
            do Memory.poke(memAddress + 384, 17410);
            do Memory.poke(memAddress + 416, 16386);
            do Memory.poke(memAddress + 448, 32766);
            do Memory.poke(memAddress + 480, 0);
        } else {
            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -32767);
            do Memory.poke(memAddress + 64, -32767);
            do Memory.poke(memAddress + 96, -32751);
            do Memory.poke(memAddress + 128, -32751);
            do Memory.poke(memAddress + 160, -31727);
            do Memory.poke(memAddress + 192, -31727);
            do Memory.poke(memAddress + 224, -31727);
            do Memory.poke(memAddress + 256, -28687);
            do Memory.poke(memAddress + 288, -31743);
            do Memory.poke(memAddress + 320, -31743);
            do Memory.poke(memAddress + 352, -31743);
            do Memory.poke(memAddress + 384, -31743);
            do Memory.poke(memAddress + 416, -32767);
            do Memory.poke(memAddress + 448, -32767);
            do Memory.poke(memAddress + 480, -1);
        }
        return;
    } 

    /** Draw a mine cell */
    method void drawMine() {
        var int memAddress;
        let memAddress = addressScreenShift + (32*(16*y)) + (31-(8-x)) ;
        do Memory.poke(memAddress + 0, -1);
        do Memory.poke(memAddress + 32, -32767);
        do Memory.poke(memAddress + 64, -32767);
        do Memory.poke(memAddress + 96, -28663);
        do Memory.poke(memAddress + 128, -30319);
        do Memory.poke(memAddress + 160, -30751);
        do Memory.poke(memAddress + 192, -30751);
        do Memory.poke(memAddress + 224, -28687);
        do Memory.poke(memAddress + 256, -28687);
        do Memory.poke(memAddress + 288, -30751);
        do Memory.poke(memAddress + 320, -30751);
        do Memory.poke(memAddress + 352, -30319);
        do Memory.poke(memAddress + 384, -28663);
        do Memory.poke(memAddress + 416, -32767);
        do Memory.poke(memAddress + 448, -32767);
        do Memory.poke(memAddress + 480, -1);  
        return;
    } 

    /** Disposes the Cell */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}